//-----------------------------------------------------------------------------------------------
//
// 弾の処理[bullet.cpp]
// Author : SHUGO kURODA
//
//-----------------------------------------------------------------------------------------------

//-----------------------------------------------------------------------------------------------
// インクルードファイル
//-----------------------------------------------------------------------------------------------
#include "bullet.h"
#include "manager.h"
#include "renderer.h"
#include "explosion.h"

//-----------------------------------------------------------------------------------------------
// 変数変数
//-----------------------------------------------------------------------------------------------
// 幅
const float CBullet::SIZE_WIDTH = 30.0f;
// 高さ
const float CBullet::SIZE_HEIGHT = 30.0f;
// 基本移動量
const float CBullet::MOVE_DEFAULT = 4.0f;

//-----------------------------------------------------------------------------------------------
// 静的メンバ変数
//-----------------------------------------------------------------------------------------------
// テクスチャのポインタ
LPDIRECT3DTEXTURE9 CBullet::m_pTexture = nullptr;

//-----------------------------------------------------------------------------------------------
// コンストラクタ
//-----------------------------------------------------------------------------------------------
CBullet::CBullet() :
	m_move(0.0f, 0.0f, 0.0f), m_nLife(0)
{
	SetObjectType(EObject::TYPE_BULLET);
}

//-----------------------------------------------------------------------------------------------
// デストラクタ
//-----------------------------------------------------------------------------------------------
CBullet::~CBullet()
{

}

//-----------------------------------------------------------------------------------------------
// 生成
//-----------------------------------------------------------------------------------------------
CBullet* CBullet::Create(const D3DXVECTOR3& pos)
{
	// ポインタクラスを宣言
	CBullet* pBullet = new CBullet;

	if (pBullet != nullptr)
	{// もしnullptrではなかったら
	 // 初期化
		pBullet->Init(pos);

		// テクスチャの設定
		pBullet->BindTexture(m_pTexture);
	}

	return pBullet;
}

//-----------------------------------------------------------------------------------------------
// テクスチャの読み込み
//-----------------------------------------------------------------------------------------------
HRESULT CBullet::Load()
{
	// デバイスの取得
	LPDIRECT3DDEVICE9 pDevice = CManager::GetRenderer()->GetDevice();

	// テクスチャの読み込み
	D3DXCreateTextureFromFile(pDevice,
		"data/TEXTURE/bullet000.png",
		&m_pTexture);

	return S_OK;
}

//-----------------------------------------------------------------------------------------------
// テクスチャの削除
//-----------------------------------------------------------------------------------------------
void CBullet::Unload()
{
	// テクスチャの破棄
	if (m_pTexture != nullptr)
	{
		m_pTexture->Release();
		m_pTexture = nullptr;
	}
}

//-----------------------------------------------------------------------------------------------
// 初期化
//-----------------------------------------------------------------------------------------------
HRESULT CBullet::Init(const D3DXVECTOR3& pos)
{
	// 移動量
	m_move.x = MOVE_DEFAULT;
	// 寿命
	m_nLife = LIFE;
	// サイズ
	CObject2D::SetSize(SIZE_WIDTH, SIZE_HEIGHT);

	CObject2D::Init(pos);

	return S_OK;
}

//-----------------------------------------------------------------------------------------------
// 終了
//-----------------------------------------------------------------------------------------------
void CBullet::Uninit()
{
	CObject2D::Uninit();
}

//-----------------------------------------------------------------------------------------------
// 更新
//-----------------------------------------------------------------------------------------------
void CBullet::Update()
{
	// 位置の取得
	D3DXVECTOR3 pos = CObject2D::GetPosition();

	// 当たり判定

	// 移動量の更新
	pos += m_move;

	// ライフを減らしていく
	m_nLife--;

	if (m_nLife == 0)
	{// ライフが0
		// 爆発の生成
		CExplosion::Create(pos);
		// 弾の破棄
		Uninit();
	}
	else
	{
		for (int nCntObject = 0; nCntObject < MAX_OBJECT; nCntObject++)
		{
			CObject *pObject = CObject::GetObject(nCntObject);
			if (pObject != nullptr)
			{
				CObject::EObject objType = pObject->GetObjType();
				if (objType == TYPE_ENEMY)
				{
					D3DXVECTOR3 posObj = pObject->GetPosition();
				}
			}
		}

		// 位置の更新
		CObject2D::SetPosition(pos);
	}
}

//-----------------------------------------------------------------------------------------------
// 描画
//-----------------------------------------------------------------------------------------------
void CBullet::Draw()
{
	CObject2D::Draw();
}

//-----------------------------------------------------------------------------------------------
// 当たり判定
//-----------------------------------------------------------------------------------------------
bool CBullet::Collision(D3DXVECTOR3 posStart, D3DXVECTOR3 posEnd, int StartLength, int EndLength)
{
	//2つの座標差分を求める
	D3DXVECTOR3 Length = posStart - posEnd;

	//座標差分から距離を求める
	float fLength = D3DXVec3Length(&Length);

	if (StartLength + EndLength >= fLength)
	{//お互いの球体サイズの合計より距離が小さかったら
		return true;	//当たった
	}

	return false;		//当たってない
}
